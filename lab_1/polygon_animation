#include <GLFW/glfw3.h>
#include <cmath>
#include <vector>

const float PI = 3.14159265359f;

// Функция для интерполяции
float lerp(float a, float b, float t) {
    return a * (1.0f - t) + b * t;
}

// Генерация многоугольника с заданным количеством вершин
std::vector<float> generatePolygon(int vertexCount, float radius, float centerX, float centerY) {
    std::vector<float> vertices;
    for (int i = 0; i < vertexCount; ++i) {
        float angle = 2 * PI * i / vertexCount;
        vertices.push_back(centerX + radius * cos(angle));
        vertices.push_back(centerY + radius * sin(angle));
    }
    return vertices;
}

int main() {
    // Инициализация GLFW
    if (!glfwInit()) {
        return -1;
    }

    // Создаем окно
    GLFWwindow* window = glfwCreateWindow(800, 600, "Polygon Animation", NULL, NULL);
    if (!window) {
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);

    // Параметры анимации
    int vertexCount = 6;
    float baseRadius = 0.5f;
    float centerX = 0.0f, centerY = 0.0f;
    float t = 0.0f;
    bool forward = true;

    // Основной цикл
    while (!glfwWindowShouldClose(window)) {
        // Очистка экрана
        glClear(GL_COLOR_BUFFER_BIT);

        // Интерполяция позиции
        float dx = lerp(-0.5f, 0.5f, t);
        float dy = 0.2f * sin(2 * PI * t);

        // Интерполяция размера
        float radius = lerp(0.3f, 0.7f, t);

        // Генерация вершин многоугольника
        std::vector<float> vertices = generatePolygon(vertexCount, radius, centerX + dx, centerY + dy);

        // Отрисовка многоугольника
        glBegin(GL_POLYGON);
        for (size_t i = 0; i < vertices.size(); i += 2) {
            float r = (sin(t * PI) + 1.0f) / 2.0f; // Более медленная анимация цвета
            float g = (cos(t * PI) + 1.0f) / 2.0f;
            glColor3f(r, g, 0.5f);
            glVertex2f(vertices[i], vertices[i + 1]);
        }
        glEnd();

        // Обновление времени
        t += forward ? 0.002f : -0.002f; // Уменьшение шага времени для замедления
        if (t >= 1.0f || t <= 0.0f) forward = !forward;

        // Обновление экрана
        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);
    glfwTerminate();
    return 0;
}
